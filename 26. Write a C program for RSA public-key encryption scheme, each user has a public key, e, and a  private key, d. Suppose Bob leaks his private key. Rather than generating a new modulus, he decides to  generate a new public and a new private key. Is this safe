#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdint.h>
#include <math.h>
int is_prime(int num) {
    if (num <= 1) return 0;
    if (num <= 3) return 1;
    if (num % 2 == 0 || num % 3 == 0) return 0;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return 0;
    }
    return 1;
}
int generate_prime() {
    int num;
    do {
        num = rand() % 100 + 2; 
    } while (!is_prime(num));
    return num;
}
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
int mod_inverse(int a, int m) {
    int m0 = m, y = 0, x = 1;

    if (m == 1) return 0;

    while (a > 1) {
        int q = a / m;
        int t = m;

        m = a % m;
        a = t;
        t = y;

        y = x - q * y;
        x = t;
    }

    if (x < 0) x += m0;

    return x;
}

// Function to generate RSA keys
void generate_rsa_keys(int *n, int *e, int *d) {
    int p = generate_prime();
    int q = generate_prime();
    *n = p * q;
    int phi_n = (p - 1) * (q - 1);

    // Choose e
    *e = 3; // Common choice for e
    while (gcd(*e, phi_n) != 1) {
        (*e)++;
    }

    // Compute d
    *d = mod_inverse(*e, phi_n);
}

// Main function
int main() {
    srand(time(NULL)); // Seed random number generator

    int n, e, d;
    generate_rsa_keys(&n, &e, &d);

    // Output the results
    printf("RSA Key Pair:\n");
    printf("Public Key: (e = %d, n = %d)\n", e, n);
    printf("Private Key: d = %d\n", d);

    return 0;
}
