#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Function to generate the 5x5 Playfair matrix
void generateMatrix(char keyword[], char matrix[SIZE][SIZE]) {
    int i, j, k = 0;
    char alphabet[] = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
    int freq[26] = {0};
    char *ptr = alphabet; // Create a pointer to the alphabet array

    // Remove duplicates from keyword and count frequency of each letter
    for (i = 0; i < strlen(keyword); i++) {
        if (!freq[toupper(keyword[i]) - 'A']) {
            freq[toupper(keyword[i]) - 'A'] = 1;
            keyword[k++] = toupper(keyword[i]);
        }
    }
    keyword[k] = '\0';

    // Fill the matrix with keyword and remaining alphabet letters
    k = 0;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (k < strlen(keyword)) {
                matrix[i][j] = keyword[k++];
            } else {
                while (freq[*ptr - 'A']) {
                    ptr++; // Increment the pointer
                }
                matrix[i][j] = *ptr++;
                freq[matrix[i][j] - 'A'] = 1;
            }
        }
    }
}

// Function to find the position of a letter in the matrix
void findPosition(char matrix[SIZE][SIZE], char letter, int *row, int *col) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (matrix[i][j] == toupper(letter)) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to encrypt a pair of letters using the Playfair matrix
void encryptPair(char matrix[SIZE][SIZE], char letter1, char letter2, char *ciphertext) {
    int row1, col1, row2, col2;
    findPosition(matrix, letter1, &row1, &col1);
    findPosition(matrix, letter2, &row2, &col2);

    // Rules for encryption
    if (row1 == row2) {
        // Same row, move to the right
        ciphertext[0] = matrix[row1][(col1 + 1) % SIZE];
        ciphertext[1] = matrix[row2][(col2 + 1) % SIZE];
    } else if (col1 == col2) {
        // Same column, move down
        ciphertext[0] = matrix[(row1 + 1) % SIZE][col1];
        ciphertext[1] = matrix[(row2 + 1) % SIZE][col2];
    } else {
        // Different row and column, swap columns
        ciphertext[0] = matrix[row1][col2];
        ciphertext[1] = matrix[row2][col1];
    }
}

// Function to encrypt a plaintext string using the Playfair cipher
void playfairEncrypt(char keyword[], char plaintext[], char ciphertext[]) {
    char matrix[SIZE][SIZE];
    generateMatrix(keyword, matrix);

    int i, j;
    for (i = 0; i < strlen(plaintext); i += 2) {
        char pair[3];
        pair[0] = plaintext[i];
        pair[1] = (i + 1 < strlen(plaintext))? plaintext[i + 1] : 'X';
        pair[2] = '\0';

        char encrypted[3];
        encryptPair(matrix, pair[0], pair[1], encrypted);
        strcat(ciphertext, encrypted);
    }
}

int main() {
    char keyword[] = "MONARCHY";
    char plaintext[] = "MOSQUE";
    char ciphertext[256] = "";

    playfairEncrypt(keyword, plaintext, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);

    printf("\nCreated by Chandu (192210425)\n");

    return 0;
}
