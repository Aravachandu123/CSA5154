#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void generateMatrix(char key[], char matrix[SIZE][SIZE]) {
    int alphabet[26] = {0};
    int x = 0, y = 0;
    for (int i = 0; i < strlen(key); i++) {
        char ch = tolower(key[i]);
        if (ch == 'j') ch = 'i';  
        if (alphabet[ch - 'a'] == 0) {
            matrix[x][y++] = ch;
            alphabet[ch - 'a'] = 1;
            if (y == SIZE) {
                y = 0;
                x++;
            }
        }
    }
    for (char ch = 'a'; ch <= 'z'; ch++) {
        if (ch == 'j') continue;  
        if (alphabet[ch - 'a'] == 0) {
            matrix[x][y++] = ch;
            alphabet[ch - 'a'] = 1;
            if (y == SIZE) {
                y = 0;
                x++;
            }
        }
    }
}
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    if (ch == 'j') ch = 'i';  
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void encryptDigraph(char matrix[SIZE][SIZE], char digraph[2], char result[2]) {
    int row1, col1, row2, col2;
    findPosition(matrix, digraph[0], &row1, &col1);
    findPosition(matrix, digraph[1], &row2, &col2);
    if (row1 == row2) {
        result[0] = matrix[row1][(col1 + 1) % SIZE];
        result[1] = matrix[row2][(col2 + 1) % SIZE];
    } else if (col1 == col2) {
        result[0] = matrix[(row1 + 1) % SIZE][col1];
        result[1] = matrix[(row2 + 1) % SIZE][col2];
    } else {
        result[0] = matrix[row1][col2];
        result[1] = matrix[row2][col1];
    }
}
void preprocessPlaintext(char plaintext[], char processed[]) {
    int length = strlen(plaintext);
    int index = 0;
    for (int i = 0; i < length; i++) {
        char ch = tolower(plaintext[i]);
        if (!isalpha(ch)) continue; 
        if (index > 0 && processed[index - 1] == ch) {
            processed[index++] = 'x';
        }
        processed[index++] = ch;
    }
    if (index % 2 != 0) {
        processed[index++] = 'x';
    }
    processed[index] = '\0';
}
int main() {
    char key[100], plaintext[100], processed[100], ciphertext[100] = "";
    char matrix[SIZE][SIZE];
	printf("Enter the keyword: ");
    scanf("%s", key);
	printf("Enter the plaintext: ");
    scanf("%s", plaintext);
	generateMatrix(key, matrix);
	preprocessPlaintext(plaintext, processed);
	for (int i = 0; i < strlen(processed); i += 2) {
        char digraph[2] = {processed[i], processed[i + 1]};
        char result[2];
        encryptDigraph(matrix, digraph, result);
        strncat(ciphertext, result, 2);
    }
    printf("Encrypted string: %s\n", ciphertext);
    return 0;
}
