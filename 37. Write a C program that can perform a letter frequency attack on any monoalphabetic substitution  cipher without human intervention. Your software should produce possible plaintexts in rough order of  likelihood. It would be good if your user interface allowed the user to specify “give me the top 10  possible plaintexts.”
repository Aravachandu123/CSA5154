#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// English letter frequencies (from most common to least common)
double english_frequencies[] = {
    0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228,
    0.02015, 0.06094, 0.06966, 0.00153, 0.00772, 0.04025,
    0.02406, 0.06749, 0.07507, 0.01929, 0.00095, 0.05987,
    0.06327, 0.09056, 0.02758, 0.00978, 0.02360, 0.00150,
    0.01974, 0.00074
};

// Function to calculate the frequency of each letter in the ciphertext
void calculate_frequencies(char *ciphertext, double *frequencies) {
    int count[26] = {0};
    int length = strlen(ciphertext);

    for (int i = 0; i < length; i++) {
        char c = tolower(ciphertext[i]);
        if (c >= 'a' && c <= 'z') {
            count[c - 'a']++;
        }
    }

    for (int i = 0; i < 26; i++) {
        frequencies[i] = (double)count[i] / length;
    }
}

// Function to calculate the score of a given plaintext
double calculate_score(char *plaintext) {
    double score = 0;
    double frequencies[26];

    calculate_frequencies(plaintext, frequencies);

    for (int i = 0; i < 26; i++) {
        score += english_frequencies[i] * frequencies[i];
    }

    return score;
}

// Function to generate all possible plaintexts
void generate_plaintexts(char *ciphertext, int num_plaintexts) {
    char *plaintext = (char *)malloc(strlen(ciphertext) + 1);
    double scores[num_plaintexts];
    char *best_plaintexts[num_plaintexts];

    for (int i = 0; i < num_plaintexts; i++) {
        scores[i] = 0;
        best_plaintexts[i] = (char *)malloc(strlen(ciphertext) + 1);
    }

    // Generate all possible plaintexts
    for (int i = 0; i < 26; i++) {
        for (int j = 0; j < strlen(ciphertext); j++) {
            plaintext[j] = (ciphertext[j] - 'a' + i) % 26 + 'a';
        }

        double score = calculate_score(plaintext);

        // Check if this plaintext is one of the best so far
        for (int k = 0; k < num_plaintexts; k++) {
            if (score > scores[k]) {
                // Move the current best plaintexts down
                for (int l = num_plaintexts - 1; l > k; l--) {
                    scores[l] = scores[l - 1];
                    strcpy(best_plaintexts[l], best_plaintexts[l - 1]);
                }

                // Insert the new plaintext
                scores[k] = score;
                strcpy(best_plaintexts[k], plaintext);

                break;
            }
        }
    }

    // Print the top plaintexts
    for (int i = 0; i < num_plaintexts; i++) {
        printf("Plaintext %d: %s (score: %f)\n", i + 1, best_plaintexts[i], scores[i]);
    }

    free(plaintext);
    for (int i = 0; i < num_plaintexts; i++) {
        free(best_plaintexts[i]);
    }
}

int main() {
    char ciphertext[] = "gur penml xrl vf zl frperg";
    int num_plaintexts = 10;

    generate_plaintexts(ciphertext, num_plaintexts);

    return 0;
}
