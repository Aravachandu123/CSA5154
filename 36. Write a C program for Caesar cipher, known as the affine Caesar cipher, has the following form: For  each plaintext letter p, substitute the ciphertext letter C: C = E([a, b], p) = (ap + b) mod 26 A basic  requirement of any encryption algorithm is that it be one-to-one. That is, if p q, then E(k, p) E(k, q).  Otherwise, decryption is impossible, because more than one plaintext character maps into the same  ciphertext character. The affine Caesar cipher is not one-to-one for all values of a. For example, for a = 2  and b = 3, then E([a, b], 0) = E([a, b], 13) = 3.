#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// Function to find the greatest common divisor using the Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to find the modular multiplicative inverse of 'a' under modulo 'm'
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; // Inverse does not exist if returned value is -1
}

// Function to encrypt the plaintext using the Affine Caesar cipher
void affineEncrypt(const char *plaintext, char *ciphertext, int a, int b) {
    int length = strlen(plaintext);
    for (int i = 0; i < length; i++) {
        char ch = toupper(plaintext[i]);
        if (isalpha(ch)) {
            ciphertext[i] = ((a * (ch - 'A') + b) % ALPHABET_SIZE) + 'A';
        } else {
            ciphertext[i] = ch; // Non-alphabet characters remain unchanged
        }
    }
    ciphertext[length] = '\0';
}

// Function to decrypt the ciphertext using the Affine Caesar cipher
void affineDecrypt(const char *ciphertext, char *plaintext, int a, int b) {
    int length = strlen(ciphertext);
    int a_inv = modInverse(a, ALPHABET_SIZE);
    if (a_inv == -1) {
        printf("Inverse of a does not exist; decryption is not possible.\n");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < length; i++) {
        char ch = toupper(ciphertext[i]);
        if (isalpha(ch)) {
            plaintext[i] = ((a_inv * (ch - 'A' - b + ALPHABET_SIZE)) % ALPHABET_SIZE) + 'A';
        } else {
            plaintext[i] = ch; // Non-alphabet characters remain unchanged
        }
    }
    plaintext[length] = '\0';
}

int main() {
    char plaintext[100], ciphertext[100];
    int a, b;

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0'; // Remove newline character

    printf("Enter the value of a (must be coprime to 26): ");
    scanf("%d", &a);
    printf("Enter the value of b: ");
    scanf("%d", &b);

    // Check if a and 26 are coprime
    if (gcd(a, ALPHABET_SIZE) != 1) {
        printf("The value of 'a' must be coprime to 26. Please enter a valid value.\n");
        return 1;
    }

    affineEncrypt(plaintext, ciphertext, a, b);
    printf("Encrypted ciphertext: %s\n", ciphertext);

    affineDecrypt(ciphertext, plaintext, a, b);
    printf("Decrypted plaintext: %s\n", plaintext);

    return 0;
}
