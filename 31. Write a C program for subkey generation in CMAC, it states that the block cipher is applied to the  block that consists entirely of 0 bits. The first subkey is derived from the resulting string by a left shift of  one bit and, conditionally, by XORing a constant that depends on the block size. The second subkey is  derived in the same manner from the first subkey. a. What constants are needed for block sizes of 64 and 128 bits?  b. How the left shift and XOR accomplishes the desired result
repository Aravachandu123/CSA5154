#include <stdio.h>
#include <stdint.h>
#include <string.h>

// Function to generate CMAC subkeys
void generate_cmac_subkeys(uint8_t* key, size_t key_len, uint8_t* subkey1, uint8_t* subkey2, size_t block_size) {
    // Block cipher encryption of a block of zeros
    uint8_t zero_block[block_size / 8];
    memset(zero_block, 0, block_size / 8);
    // NOTE: Replace this with your block cipher encryption function
    // For demonstration purposes, we'll use a simple XOR with the key
    for (size_t i = 0; i < block_size / 8; i++) {
        zero_block[i] ^= key[i % key_len];
    }

    // Derive the first subkey
    uint8_t constant;
    if (block_size == 64) {
        constant = 0x1B;
    } else if (block_size == 128) {
        constant = 0x87;
    } else {
        printf("Unsupported block size\n");
        return;
    }
    subkey1[0] = (zero_block[0] << 1) | (zero_block[1] >> 7);
    for (size_t i = 1; i < block_size / 8 - 1; i++) {
        subkey1[i] = (zero_block[i] << 1) | (zero_block[i + 1] >> 7);
    }
    subkey1[block_size / 8 - 1] = (zero_block[block_size / 8 - 1] << 1) ^ constant;

    // Derive the second subkey
    subkey2[0] = (subkey1[0] << 1) | (subkey1[1] >> 7);
    for (size_t i = 1; i < block_size / 8 - 1; i++) {
        subkey2[i] = (subkey1[i] << 1) | (subkey1[i + 1] >> 7);
    }
    subkey2[block_size / 8 - 1] = (subkey1[block_size / 8 - 1] << 1) ^ constant;
}

int main() {
    // Example key
    uint8_t key[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
    size_t key_len = sizeof(key);

    // Generate subkeys for 64-bit block size
    uint8_t subkey1_64[8];
    uint8_t subkey2_64[8];
    generate_cmac_subkeys(key, key_len, subkey1_64, subkey2_64, 64);

    // Generate subkeys for 128-bit block size
    uint8_t subkey1_128[16];
    uint8_t subkey2_128[16];
    generate_cmac_subkeys(key, key_len, subkey1_128, subkey2_128, 128);

    // Print the subkeys
    printf("Subkey 1 (64-bit): ");
    for (size_t i = 0; i < 8; i++) {
        printf("%02x", subkey1_64[i]);
    }
    printf("\n");
    printf("Subkey 2 (64-bit): ");
    for (size_t i = 0; i < 8; i++) {
        printf("%02x", subkey2_64[i]);
    }
    printf("\n");
    printf("Subkey 1 (128-bit): ");
    for (size_t i = 0; i < 16; i++) {
        printf("%02x", subkey1_128[i]);
    }
    printf("\n");
    printf("Subkey 2 (128-bit): ");
    for (size_t i = 0; i < 16; i++) {
        printf("%02x", subkey2_128[i]);
    }
    printf("\n");

    return 0;
}
