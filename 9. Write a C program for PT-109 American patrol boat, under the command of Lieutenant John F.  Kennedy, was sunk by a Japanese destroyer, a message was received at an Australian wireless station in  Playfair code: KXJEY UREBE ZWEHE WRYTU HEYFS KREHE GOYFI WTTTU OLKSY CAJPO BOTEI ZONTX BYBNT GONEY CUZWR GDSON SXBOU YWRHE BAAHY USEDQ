#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define MATRIX_SIZE 5
void createPlayfairMatrix(const char* keyword, char matrix[MATRIX_SIZE][MATRIX_SIZE]) {
    int used[26] = {0};
    int k = 0;
    for (int i = 0; keyword[i] != '\0'; ++i) {
        char ch = toupper(keyword[i]);
        if (isalpha(ch)) {
            ch = (ch == 'J') ? 'I' : ch;  // Treat 'J' as 'I'
            if (!used[ch - 'A']) {
                matrix[k / MATRIX_SIZE][k % MATRIX_SIZE] = ch;
                used[ch - 'A'] = 1;
                ++k;
            }
        }
    }
	for (int i = 0; i < 26; ++i) {
        char ch = 'A' + i;
        if (ch != 'J' && !used[i]) {
            matrix[k / MATRIX_SIZE][k % MATRIX_SIZE] = ch;
            ++k;
        }
    }
}
void findPosition(char ch, const char matrix[MATRIX_SIZE][MATRIX_SIZE], int* row, int* col) {
    for (int i = 0; i < MATRIX_SIZE; ++i) {
        for (int j = 0; j < MATRIX_SIZE; ++j) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to decrypt a digraph using the Playfair matrix
void decryptDigraph(char a, char b, const char matrix[MATRIX_SIZE][MATRIX_SIZE], char* decryptedA, char* decryptedB) {
    int row1, col1, row2, col2;
    findPosition(a, matrix, &row1, &col1);
    findPosition(b, matrix, &row2, &col2);

    if (row1 == row2) {  // Same row
        *decryptedA = matrix[row1][(col1 - 1 + MATRIX_SIZE) % MATRIX_SIZE];
        *decryptedB = matrix[row2][(col2 - 1 + MATRIX_SIZE) % MATRIX_SIZE];
    } else if (col1 == col2) {  // Same column
        *decryptedA = matrix[(row1 - 1 + MATRIX_SIZE) % MATRIX_SIZE][col1];
        *decryptedB = matrix[(row2 - 1 + MATRIX_SIZE) % MATRIX_SIZE][col2];
    } else {  // Rectangle
        *decryptedA = matrix[row1][col2];
        *decryptedB = matrix[row2][col1];
    }
}

// Function to decrypt the ciphertext using the Playfair cipher
void playfairDecrypt(const char* ciphertext, const char* keyword, char* plaintext) {
    char matrix[MATRIX_SIZE][MATRIX_SIZE];
    createPlayfairMatrix(keyword, matrix);

    int len = strlen(ciphertext);
    int j = 0;

    for (int i = 0; i < len; i += 2) {
        char a = toupper(ciphertext[i]);
        char b = toupper(ciphertext[i + 1]);

        if (a == ' ') {
            plaintext[j++] = a;
            --i;  // Skip space
            continue;
        }

        if (b == ' ') {
            plaintext[j++] = b;
            continue;
        }

        if (b == a) {  // If same letter in pair, use 'X' as filler
            b = 'X';
        }

        char decryptedA, decryptedB;
        decryptDigraph(a, b, matrix, &decryptedA, &decryptedB);
        plaintext[j++] = tolower(decryptedA);
        plaintext[j++] = tolower(decryptedB);
    }
    plaintext[j] = '\0';  // Null-terminate the plaintext
}

int main() {
    const char* ciphertext = "KXJEY UREBE ZWEHE WRYTU HEYFS KREHE GOYFI WTTTU OLKSY CAJPO BOTEI ZONTX BYBNT GONEY CUZWR GDSON SXBOU YWRHE BAAHY USEDQ";
    const char* keyword = "PLAYFAIR";
    char plaintext[256];

    // Decrypt the ciphertext
    playfairDecrypt(ciphertext, keyword, plaintext);
    
    // Output the decrypted text
    printf("Decrypted text: %s\n", plaintext);

    return 0;
}
