#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define ALPHABET_SIZE 26
#define MAX_PLAINTEXT_LENGTH 100

// Frequency of letters in the English language (from most common to least common)
double letter_frequencies[ALPHABET_SIZE] = {
    0.0817, 0.0149, 0.0278, 0.0425, 0.1270, 0.0223, 0.0202, 0.0609,
    0.0695, 0.0015, 0.0077, 0.0402, 0.0240, 0.0675, 0.0751, 0.0193,
    0.0009, 0.0599, 0.0633, 0.0906, 0.0276, 0.0098, 0.0236, 0.0015,
    0.0197, 0.0007
};

// Function to calculate the frequency of each letter in a ciphertext
void calculate_frequencies(char str[], double frequencies[]) {
    int str_len = strlen(str);
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequencies[i] = 0;
    }
    for (int i = 0; i < str_len; i++) {
        frequencies[str[i] - 'A']++;
    }
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequencies[i] /= str_len;
    }
}

// Function to calculate the score of a plaintext based on letter frequencies
double calculate_score(char plaintext[]) {
    double score = 0;
    int plaintext_len = strlen(plaintext);
    for (int i = 0; i < plaintext_len; i++) {
        score += letter_frequencies[plaintext[i] - 'A'];
    }
    return score / plaintext_len;
}

// Function to perform a letter frequency attack on an additive cipher
void letter_frequency_attack(char ciphertext[], int key, char plaintexts[][MAX_PLAINTEXT_LENGTH], double scores[], int num_plaintexts) {
    char plaintext[MAX_PLAINTEXT_LENGTH];
    double frequencies[ALPHABET_SIZE];
    calculate_frequencies(ciphertext, frequencies);
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        int shift = (i - key + ALPHABET_SIZE) % ALPHABET_SIZE;
        for (int j = 0; j < strlen(ciphertext); j++) {
            plaintext[j] = 'A' + (ciphertext[j] - 'A' - shift + ALPHABET_SIZE) % ALPHABET_SIZE;
        }
        plaintext[strlen(ciphertext)] = '\0';
        double score = calculate_score(plaintext);
        int inserted = 0;
        for (int k = 0; k < num_plaintexts; k++) {
            if (score > scores[k]) {
                for (int l = num_plaintexts - 1; l > k; l--) {
                    scores[l] = scores[l - 1];
                    strcpy(plaintexts[l], plaintexts[l - 1]);
                }
                scores[k] = score;
                strcpy(plaintexts[k], plaintext);
                inserted = 1;
                break;
            }
        }
        if (!inserted) {
            scores[num_plaintexts - 1] = score;
            strcpy(plaintexts[num_plaintexts - 1], plaintext);
        }
    }
}

int main() {
    char ciphertext[] = "YOUR_CIPHERTEXT_HERE";
    int key = 0; // unknown key
    int num_plaintexts = 10;
    char plaintexts[num_plaintexts][MAX_PLAINTEXT_LENGTH];
    double scores[num_plaintexts];
    letter_frequency_attack(ciphertext, key, plaintexts, scores, num_plaintexts);
    printf("Top %d possible plaintexts:\n", num_plaintexts);
    for (int i = 0; i < num_plaintexts; i++) {
        printf("%d. %s (score: %f)\n", i + 1, plaintexts[i], scores[i]);
    }
    return 0;
}
