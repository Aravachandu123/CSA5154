#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to find the modular multiplicative inverse of 'a' under modulo 'm'
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}

// Function to encrypt the plaintext using the affine cipher
void encrypt(char plaintext[], int a, int b, char ciphertext[]) {
    int i;
    for (i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char offset = isupper(plaintext[i]) ? 'A' : 'a';
            ciphertext[i] = ((a * (plaintext[i] - offset) + b) % 26) + offset;
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[i] = '\0'; // Null-terminate the ciphertext
}

// Function to decrypt the ciphertext using the affine cipher
void decrypt(char ciphertext[], int a, int b, char plaintext[]) {
    int a_inv = modInverse(a, 26); // Find the modular multiplicative inverse of 'a'
    if (a_inv == -1) {
        printf("Inverse of a does not exist. Decryption is not possible.\n");
        return;
    }
    int i;
    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char offset = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = (a_inv * ((ciphertext[i] - offset - b + 26) % 26)) % 26 + offset;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[i] = '\0'; // Null-terminate the plaintext
}

int main() {
    char plaintext[100];
    char ciphertext[100];
    char decryptedText[100];
    int a, b;

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = 0; // Remove the trailing newline

    printf("Enter the value of a (must be coprime with 26): ");
    scanf("%d", &a);

    // Check if 'a' is coprime with 26
    int gcd = 1;
    for (int i = 1; i <= a && i <= 26; i++) {
        if (a % i == 0 && 26 % i == 0) {
            gcd = i;
        }
    }
    if (gcd != 1) {
        printf("The value of a is not coprime with 26. Please enter a valid value.\n");
        return 1;
    }

    printf("Enter the value of b: ");
    scanf("%d", &b);

    // Encrypt the plaintext
    encrypt(plaintext, a, b, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);

    // Decrypt the ciphertext
    decrypt(ciphertext, a, b, decryptedText);
    printf("Decrypted Text: %s\n", decryptedText);

    return 0;
}
