#include <stdio.h>
#include <stdint.h>

// Function to perform modular exponentiation (base^exp % mod)
uint64_t mod_exp(uint64_t base, uint64_t exp, uint64_t mod) {
    uint64_t result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

int main() {
    // RSA public parameters
    uint64_t n = 3233;  // Example modulus (p * q) for illustration (not a real large prime)
    uint64_t e = 17;    // Example public exponent

    // Example message (each character as integer 0-25)
    uint8_t message[] = {0, 1, 2, 25};  // 'A', 'B', 'C', 'Z'

    printf("Original message: ");
    for (int i = 0; i < sizeof(message); i++) {
        printf("%d ", message[i]);
    }
    printf("\n");

    printf("Encrypted message: ");
    for (int i = 0; i < sizeof(message); i++) {
        uint64_t c = mod_exp(message[i], e, n); // Encrypt each integer
        printf("%llu ", c);
    }
    printf("\n");

    return 0;
}
