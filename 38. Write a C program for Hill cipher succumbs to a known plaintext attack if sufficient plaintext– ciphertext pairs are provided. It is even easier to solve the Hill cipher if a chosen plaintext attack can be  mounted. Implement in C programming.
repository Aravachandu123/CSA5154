#include <stdio.h>
#include <stdlib.h>

#define MOD 26

// Function to calculate the determinant of a 2x2 matrix
int determinant(int matrix[2][2]) {
    return (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]) % MOD;
}

// Function to find the modular inverse of a number modulo MOD
int modInverse(int a, int mod) {
    a = a % mod;
    for (int x = 1; x < mod; x++) {
        if ((a * x) % mod == 0) {
            return x;
        }
    }
    return 1;
}

// Function to calculate the inverse of a 2x2 matrix modulo MOD
void inverseMatrix(int matrix[2][2], int invMatrix[2][2]) {
    int det = determinant(matrix);
    int detInv = modInverse(det, MOD);
    invMatrix[0][0] = (matrix[1][1] * detInv) % MOD;
    invMatrix[1][1] = (matrix[0][0] * detInv) % MOD;
    invMatrix[0][1] = (-matrix[0][1] * detInv + MOD) % MOD;
    invMatrix[1][0] = (-matrix[1][0] * detInv + MOD) % MOD;
}

// Function to multiply two 2x2 matrices
void matrixMultiply(int mat1[2][2], int mat2[2][2], int res[2][2]) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            res[i][j] = 0;
            for (int k = 0; k < 2; k++) {
                res[i][j] += mat1[i][k] * mat2[k][j];
            }
            res[i][j] = res[i][j] % MOD;
        }
    }
}

// Function to find the key matrix given plaintext and ciphertext pairs
void findKeyMatrix(int P[2][2], int C[2][2], int K[2][2]) {
    int P_inv[2][2];
    inverseMatrix(P, P_inv);
    matrixMultiply(P_inv, C, K);
}

// Function to decrypt the ciphertext using the key matrix
void decrypt(int K_inv[2][2], int ciphertext[2], int plaintext[2]) {
    for (int i = 0; i < 2; i++) {
        plaintext[i] = 0;
        for (int j = 0; j < 2; j++) {
            plaintext[i] += K_inv[i][j] * ciphertext[j];
        }
        plaintext[i] = plaintext[i] % MOD;
    }
}

int main() {
    // Known plaintext and ciphertext pairs (each pair of letters is converted to numbers)
    int P[2][2] = {{0, 1},  // Plaintext: "AB"
                   {2, 3}}; // Plaintext: "CD"

    int C[2][2] = {{15, 22}, // Ciphertext: "PX"
                   {19, 16}}; // Ciphertext: "TQ"

    int K[2][2];   // Key matrix
    int K_inv[2][2]; // Inverse key matrix

    // Find the key matrix
    findKeyMatrix(P, C, K);

    // Display the key matrix
    printf("Key Matrix:\n");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            printf("%d ", K[i][j]);
        }
        printf("\n");
    }

    // Find the inverse of the key matrix
    inverseMatrix(K, K_inv);

    // Decrypt a ciphertext message
    int ciphertext[2] = {15, 19}; // Ciphertext: "PT"
    int plaintext[2];

    decrypt(K_inv, ciphertext, plaintext);

    // Display the decrypted plaintext
    printf("\nDecrypted plaintext:\n");
    for (int i = 0; i < 2; i++) {
        printf("%c", plaintext[i] + 'A');
    }
    printf("\n");

    return 0;
}
