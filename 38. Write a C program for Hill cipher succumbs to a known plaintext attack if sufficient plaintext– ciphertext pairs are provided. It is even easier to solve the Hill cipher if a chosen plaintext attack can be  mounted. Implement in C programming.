#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define MOD 26

// Function to calculate the modular inverse
int modInverse(int a, int m) {
    int m0 = m;
    int x = 1;
    int y = 0;

    if (m == 1)
        return 0;

    while (a > 1) {
        int q = a / m;
        int t = m;

        m = a % m;
        a = t;
        t = y;

        y = x - q * y;
        x = t;
    }

    if (x < 0)
        x += m0;

    return x;
}

// Function to calculate the determinant of a 2x2 matrix
int determinant(int a, int b, int c, int d) {
    return (a * d) - (b * c);
}

// Function to perform the known plaintext attack
void knownPlaintextAttack(char *plaintext1, char *ciphertext1, char *plaintext2, char *ciphertext2) {
    int a, b, c, d;
    int det;

    // Calculate the values of a, b, c, and d
    a = (plaintext1[0] - 'A') * (ciphertext2[0] - 'A') - (plaintext1[1] - 'A') * (ciphertext2[1] - 'A');
    b = (plaintext1[0] - 'A') * (ciphertext2[1] - 'A') - (plaintext1[1] - 'A') * (ciphertext2[0] - 'A');
    c = (plaintext2[0] - 'A') * (ciphertext1[0] - 'A') - (plaintext2[1] - 'A') * (ciphertext1[1] - 'A');
    d = (plaintext2[0] - 'A') * (ciphertext1[1] - 'A') - (plaintext2[1] - 'A') * (ciphertext1[0] - 'A');

    // Calculate the determinant
    det = determinant(a, b, c, d);

    // Check if the determinant is invertible
    if (det == 0 || det % 2 == 0) {
        printf("Determinant is not invertible. Attack failed.\n");
        return;
    }

    // Calculate the modular inverse of the determinant
    int detInv = modInverse(det, MOD);

    // Calculate the encryption key
    int key11 = (detInv * a) % MOD;
    int key12 = (detInv * b) % MOD;
    int key21 = (detInv * c) % MOD;
    int key22 = (detInv * d) % MOD;

    printf("Encryption key: [%d %d]\n[%d %d]\n", key11, key12, key21, key22);
}

int main() {
    char plaintext1[3], ciphertext1[3], plaintext2[3], ciphertext2[3];

    printf("Enter the first plaintext: ");
    scanf("%2s", plaintext1);

    printf("Enter the first ciphertext: ");
    scanf("%2s", ciphertext1);

    printf("Enter the second plaintext: ");
    scanf("%2s", plaintext2);

    printf("Enter the second ciphertext: ");
    scanf("%2s", ciphertext2);

    knownPlaintextAttack(plaintext1, ciphertext1, plaintext2, ciphertext2);

    return 0;
}
