#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define ALPHABET_SIZE 26
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}
void affineDecrypt(char* ciphertext, char* plaintext, int a, int b) {
    int a_inv = modInverse(a, ALPHABET_SIZE);
    if (a_inv == -1) {
        printf("No modular inverse found. Decryption is not possible.\n");
        return;
    }
    for (int i = 0; ciphertext[i] != '\0'; ++i) {
        char ch = ciphertext[i];
        if (isalpha(ch)) {
            char offset = isupper(ch) ? 'A' : 'a';
            plaintext[i] = (a_inv * ((ch - offset - b + ALPHABET_SIZE) % ALPHABET_SIZE)) % ALPHABET_SIZE + offset;
        } else {
            plaintext[i] = ch;
        }
    }
    plaintext[strlen(ciphertext)] = '\0';  
}
void breakAffineCipher(char* ciphertext, char* plaintext) {
    char mostFrequent = 'B';
    char secondMostFrequent = 'U';
    char mostFrequentEnglish = 'E';
    char secondMostFrequentEnglish = 'T';
    int x1 = mostFrequent - 'A';
    int x2 = secondMostFrequent - 'A';
    int y1 = mostFrequentEnglish - 'A';
    int y2 = secondMostFrequentEnglish - 'A';
    int a = (y1 - y2) * modInverse((x1 - x2 + ALPHABET_SIZE) % ALPHABET_SIZE, ALPHABET_SIZE) % ALPHABET_SIZE;
    if (a < 0) a += ALPHABET_SIZE;
    int b = (y1 - a * x1) % ALPHABET_SIZE;
    if (b < 0) b += ALPHABET_SIZE;
    printf("Estimated keys: a = %d, b = %d\n", a, b);
    affineDecrypt(ciphertext, plaintext, a, b);
}
int main() {
    char ciphertext[100], plaintext[100];
    printf("Enter the ciphertext: ");
    scanf("%s", ciphertext);
    breakAffineCipher(ciphertext, plaintext);
    printf("Decrypted string: %s\n", plaintext);
    return 0;
}
