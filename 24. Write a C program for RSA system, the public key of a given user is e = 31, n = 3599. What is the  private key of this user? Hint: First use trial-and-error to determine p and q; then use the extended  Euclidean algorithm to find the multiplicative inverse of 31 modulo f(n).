#include <stdio.h>
#include <stdlib.h>

// Function to compute the greatest common divisor (GCD) using the Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to compute the modular multiplicative inverse using the Extended Euclidean Algorithm
int mod_inverse(int a, int m) {
    int m0 = m, y = 0, x = 1;

    if (m == 1) return 0;

    while (a > 1) {
        // q is the quotient
        int q = a / m;
        int t = m;

        // m is the remainder now, process same as Euclid's algo
        m = a % m;
        a = t;
        t = y;

        // Update x and y
        y = x - q * y;
        x = t;
    }

    // Make x positive
    if (x < 0) x += m0;

    return x;
}

// Function to factorize n into p and q
void factorize_n(int n, int *p, int *q) {
    for (int i = 2; i <= n / 2; i++) {
        if (n % i == 0) {
            *p = i;
            *q = n / i;
            return;
        }
    }
}

// Main function
int main() {
    int n = 3599;
    int e = 31;
    int p, q;

    // Factorize n to find p and q
    factorize_n(n, &p, &q);

    if (p * q != n) {
        printf("Error: Unable to factorize n into two primes.\n");
        return 1;
    }

    // Compute phi(n)
    int phi_n = (p - 1) * (q - 1);

    // Compute the modular multiplicative inverse of e modulo phi(n)
    int d = mod_inverse(e, phi_n);

    // Output the results
    printf("Public key: (e = %d, n = %d)\n", e, n);
    printf("Private key: d = %d\n", d);
    printf("Prime factors of n: p = %d, q = %d\n", p, q);
    printf("phi(n) = %d\n", phi_n);

    return 0;
}
