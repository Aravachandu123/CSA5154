#include <stdio.h>
#include <stdint.h>

// Function to compute (base^exp) % mod using modular exponentiation
uint64_t mod_exp(uint64_t base, uint64_t exp, uint64_t mod) {
    uint64_t result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) // If exp is odd, multiply base with result
            result = (result * base) % mod;
        exp = exp >> 1; // exp = exp / 2
        base = (base * base) % mod; // base = base^2 % mod
    }
    return result;
}

int main() {
    // Public parameters
    uint64_t q = 23; // A prime number
    uint64_t a = 5;  // A base (generator)

    // Secret numbers
    uint64_t x_A = 6; // Alice's private secret number
    uint64_t x_B = 15; // Bob's private secret number

    // Alice computes A and sends to Bob
    uint64_t A = mod_exp(a, x_A, q);

    // Bob computes B and sends to Alice
    uint64_t B = mod_exp(a, x_B, q);

    // Alice computes the shared secret key
    uint64_t K_A = mod_exp(B, x_A, q);

    // Bob computes the shared secret key
    uint64_t K_B = mod_exp(A, x_B, q);

    printf("Alice sends A: %llu\n", A);
    printf("Bob sends B: %llu\n", B);
    printf("Alice computes shared key K_A: %llu\n", K_A);
    printf("Bob computes shared key K_B: %llu\n", K_B);

    return 0;
}
