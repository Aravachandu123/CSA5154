#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_TEXT_LENGTH 1024
#define TOP_N 10

// Frequency table for English letters
const double english_letter_freq[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
    0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.329, 9.056,
    2.758, 0.978, 2.560, 0.150, 1.929, 0.074
};

// Function to calculate letter frequencies in ciphertext
void calculate_frequencies(const char* text, int* freq) {
    memset(freq, 0, ALPHABET_SIZE * sizeof(int));
    for (int i = 0; text[i]; i++) {
        char ch = toupper(text[i]);
        if (isalpha(ch)) {
            freq[ch - 'A']++;
        }
    }
}

// Function to decrypt ciphertext using a substitution cipher
void decrypt_substitution(const char* ciphertext, const char* key, char* plaintext) {
    for (int i = 0; ciphertext[i]; i++) {
        char ch = toupper(ciphertext[i]);
        if (isalpha(ch)) {
            plaintext[i] = key[ch - 'A'];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';  // Null-terminate the plaintext
}

// Function to calculate the score of a plaintext based on letter frequency
double calculate_score(const char* text) {
    int freq[ALPHABET_SIZE] = {0};
    calculate_frequencies(text, freq);

    double score = 0.0;
    int text_length = strlen(text);

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        double observed_freq = (double)freq[i] / text_length * 100;
        score += (observed_freq - english_letter_freq[i]) * (observed_freq - english_letter_freq[i]);
    }

    return score;
}

// Function to generate and rank possible plaintexts
void generate_plaintexts(const char* ciphertext, int top_n) {
    char plaintext[MAX_TEXT_LENGTH];
    double scores[ALPHABET_SIZE * ALPHABET_SIZE];
    char candidates[ALPHABET_SIZE * ALPHABET_SIZE][MAX_TEXT_LENGTH];

    // Generate all possible substitution keys
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        for (int j = 0; j < ALPHABET_SIZE; j++) {
            if (i == j) continue;  // Skip identical mappings
            char key[ALPHABET_SIZE + 1];
            for (int k = 0; k < ALPHABET_SIZE; k++) {
                key[k] = 'A' + k;
            }
            key[i] = 'A' + j;
            key[j] = 'A' + i;
            key[ALPHABET_SIZE] = '\0';

            decrypt_substitution(ciphertext, key, plaintext);
            scores[i * ALPHABET_SIZE + j] = calculate_score(plaintext);
            strcpy(candidates[i * ALPHABET_SIZE + j], plaintext);
        }
    }

    // Sort and print top N candidates based on score
    printf("Top %d possible plaintexts based on letter frequency:\n", top_n);
    for (int i = 0; i < top_n; i++) {
        int min_index = 0;
        for (int j = 1; j < ALPHABET_SIZE * ALPHABET_SIZE; j++) {
            if (scores[j] < scores[min_index]) {
                min_index = j;
            }
        }
        printf("%d. %s (Score: %f)\n", i + 1, candidates[min_index], scores[min_index]);
        scores[min_index] = 1e10;  // Mark this score as used
    }
}

int main() {
    char ciphertext[MAX_TEXT_LENGTH];
    int top_n;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';  // Remove newline character

    printf("Enter the number of top plaintexts to display: ");
    scanf("%d", &top_n);
    if (top_n > TOP_N) top_n = TOP_N;  // Limit to maximum of TOP_N

    generate_plaintexts(ciphertext, top_n);

    return 0;
}
