#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// English letter frequencies (from most common to least common)
const double english_frequencies[] = {
    0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228, 0.02015,
    0.06094, 0.06966, 0.00153, 0.00772, 0.04025, 0.02406, 0.06749,
    0.07507, 0.01929, 0.00095, 0.05987, 0.06327, 0.09056, 0.02758,
    0.00978, 0.02360, 0.00150, 0.01974, 0.00074
};

// Function to calculate the frequency of each letter in the ciphertext
void calculate_frequencies(const char *ciphertext, double *frequencies) {
    int i, count[26] = {0};
    for (i = 0; i < strlen(ciphertext); i++) {
        if (isalpha(ciphertext[i])) {
            count[tolower(ciphertext[i]) - 'a']++;
        }
    }
    for (i = 0; i < 26; i++) {
        frequencies[i] = (double)count[i] / strlen(ciphertext);
    }
}

// Function to perform the letter frequency attack
void letter_frequency_attack(const char *ciphertext, int num_plaintexts) {
    double ciphertext_frequencies[26];
    calculate_frequencies(ciphertext, ciphertext_frequencies);

    // Calculate the correlation coefficient between the ciphertext frequencies and English frequencies
    double correlation_coefficients[26];
    for (int i = 0; i < 26; i++) {
        double sum = 0;
        for (int j = 0; j < 26; j++) {
            sum += (ciphertext_frequencies[j] - english_frequencies[j]) * (ciphertext_frequencies[(i + j) % 26] - english_frequencies[(i + j) % 26]);
        }
        correlation_coefficients[i] = sum / (sqrt(sum) * sqrt(sum));
    }

    // Sort the correlation coefficients in descending order
    int sorted_indices[26];
    for (int i = 0; i < 26; i++) {
        sorted_indices[i] = i;
    }
    for (int i = 0; i < 26; i++) {
        for (int j = i + 1; j < 26; j++) {
            if (correlation_coefficients[sorted_indices[i]] < correlation_coefficients[sorted_indices[j]]) {
                int temp = sorted_indices[i];
                sorted_indices[i] = sorted_indices[j];
                sorted_indices[j] = temp;
            }
        }
    }

    // Print the top num_plaintexts possible plaintexts
    printf("Top %d possible plaintexts:\n", num_plaintexts);
    for (int i = 0; i < num_plaintexts; i++) {
        printf("%d. ", i + 1);
        for (int j = 0; j < strlen(ciphertext); j++) {
            if (isalpha(ciphertext[j])) {
                printf("%c", 'a' + (tolower(ciphertext[j]) - 'a' - sorted_indices[i] + 26) % 26);
            } else {
                printf("%c", ciphertext[j]);
            }
        }
        printf("\n");
    }
}

int main() {
    char ciphertext[1024];
    int num_plaintexts;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strlen(ciphertext) - 1] = '\0'; // Remove newline character

    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &num_plaintexts);

    letter_frequency_attack(ciphertext, num_plaintexts);

    return 0;
}
