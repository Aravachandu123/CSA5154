#include <stdio.h>
#include <stdint.h>
#include <string.h>
int IP[] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};
int FP[] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};
void initialPermutation(uint64_t *block);
void finalPermutation(uint64_t *block);
uint64_t feistel(uint32_t right, uint64_t subkey);
void generateSubkeys(uint64_t key, uint64_t subkeys[16]);
int main() {
    uint64_t key = 0x133457799BBCDFF1;
    uint64_t ciphertext = 0x85E813540F0AB405;
    uint64_t subkeys[16];
    generateSubkeys(key, subkeys);
    for (int i = 0; i < 8; i++) {
        uint64_t temp = subkeys[i];
        subkeys[i] = subkeys[15 - i];
        subkeys[15 - i] = temp;
    }
    
    // Initial permutation
    initialPermutation(&ciphertext);
    
    // Split the block into left and right halves
    uint32_t left = (ciphertext >> 32) & 0xFFFFFFFF;
    uint32_t right = ciphertext & 0xFFFFFFFF;
    
    // 16 rounds of decryption
    for (int i = 0; i < 16; i++) {
        uint32_t temp = right;
        right = left ^ feistel(right, subkeys[i]);
        left = temp;
    }
    
    // Recombine the left and right halves
    uint64_t plaintext = ((uint64_t)right << 32) | left;
    
    // Final permutation
    finalPermutation(&plaintext);
    
    // Print the plaintext
    printf("Decrypted plaintext: %016llx\n", plaintext);
    
    return 0;
}

void initialPermutation(uint64_t *block) {
    uint64_t temp = 0;
    for (int i = 0; i < 64; i++) {
        temp <<= 1;
        temp |= (*block >> (64 - IP[i])) & 0x01;
    }
    *block = temp;
}

void finalPermutation(uint64_t *block) {
    uint64_t temp = 0;
    for (int i = 0; i < 64; i++) {
        temp <<= 1;
        temp |= (*block >> (64 - FP[i])) & 0x01;
    }
    *block = temp;
}

uint64_t feistel(uint32_t right, uint64_t subkey) {
    // This function is simplified for brevity and clarity
    return right ^ subkey;
}

void generateSubkeys(uint64_t key, uint64_t subkeys[16]) {
    // This function generates subkeys (simplified for this example)
    for (int i = 0; i < 16; i++) {
        subkeys[i] = key ^ i; // Simplified subkey generation
    }
}
